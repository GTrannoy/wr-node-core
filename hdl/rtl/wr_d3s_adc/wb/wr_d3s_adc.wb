-- -*- Mode: LUA; tab-width: 2 -*-

peripheral {
	 name = "WR D3S WB (master)";
     prefix="d3s";

	 hdl_entity="d3s_adc_wb";
	 
     reg {
      name = "Reset Register";
      prefix = "RSTR";
      field {
         name = "FPGA REF/Serdes PLL Reset";
         prefix = "PLL_RST";
				 description = "write 1: resets the internal PLL producing the DDS DAC serdes clock\
                        write 0: un-reset";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
         
      };
		};

		reg {
			prefix = "TCR";
			name = "Time Control Register";
      
         field {
				 prefix = "WR_LOCK_EN";
				 name = "WR Lock Enable";
				 description = "write 1: enable locking of the ADC clock to WR. Enable only after Si57x has been initialized.";

				 type = BIT;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
			};
			field {
				 prefix = "WR_LOCKED";
				 name = "WR Locked";
				 description = "When 1, the ADC clock is locked to WR.";

				 type = BIT;
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
			};
			field {
				 prefix = "WR_TIME_VALID";
                 name = "WR Time Valid";
				 description = "when 1, the WR Core is synchronized with the WR network";
				 type = BIT;
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
			};
            field {
				 prefix = "WR_LINK";
				 name = "WR Link";
				 description = "when 1, WR link is up";
				 type = BIT;
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
			};
   };
   reg {
	      name = "WR FREQUENCY register";
			prefix = "WR_FREQ";
			
			field {
				 prefix = "METER";
				 name = "WR frequency";
				 description = "WR frequency measured by the a freq. meter core";

				 size = 32;
				 type = SLV;
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
			};
	};
   reg {
			name = "GPIO register";
			prefix = "GPIOR";
			
            field {
				 prefix = "SI57X_SCL";
				 name = "SI57X_SCL";
				 description = "GPIO controlling the state of the SCL line of the Silabs Si57p oscillator on the ADC mezzanine."; 
				 type = BIT;
				 access_dev = READ_WRITE;
				 access_bus = READ_WRITE;
				 load = LOAD_EXT;
			};
			field {
				 prefix = "SI57X_SDA";
				 name = "SI57X_SDA";
				 description = "GPIO controlling the state of the SDA line of the Silabs Si57p oscillator on the ADC mezzanine."; 
				 type = BIT;
				 access_dev = READ_WRITE;
				 access_bus = READ_WRITE;
				 load = LOAD_EXT;
			};
			field {
				 prefix = "SPI_CS_ADC";
				 name = "SPI_CS_ADC";
				 description = "GPIO controlling the state of the Chip Select line of the LTC2175 ADC on the ADC mezzanine";
				 type = BIT;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
			};
			field {
				 prefix = "SPI_SCK";
				 name = "SPI_SCK";
				 description = "GPIO controlling the state of the SCK line of the LTC2175 ADC on the ADC mezzanine";
				 type = BIT;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
			};
			field {
				 prefix = "SPI_MOSI";
				 name = "SPI_MOSI";
				 description = "GPIO controlling the state of the MOSI line of the LTC2175 ADC on the ADC mezzanine";
				 type = BIT;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
			};
			field {
				 prefix = "SPI_MISO";
				 name = "SPI_MISO";
				 description = "GPIO with the state (input) of the MISO line of the LTC2175 ADC on the ADC mezzanine";
				 type = BIT;
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
			};
      field {
         name = "Serdes PLL locked";
         prefix = "SERDES_PLL_LOCKED";
				 description = "read 1: FPGA internal PLL for deriving 1000 MHz ADC serdes serdes clock is locked.";

         type = BIT;
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
      };
	 };
 
	 fifo_reg {
			size = 16384;  -- or more. We'll see :)
			direction = CORE_TO_BUS;
			prefix = "adc";
			name = "ADC Data FIFO";
			clock = "clk_wr_i";

			description = "FIFO with the compressed phase entries. Each entry contains a timestamp and one of two record types:\
- Initial phase (IS_RL = 0): RL_PHASE contains a fixed initial phase value, RL_LENGTH is ignored.\
- Run-length compressed phase (IS_RL = 1): RL_PHASE contains a phase delta value, RL_LENGTH is the run length (in samples).\
";

			flags_bus = {FIFO_FULL, FIFO_EMPTY, FIFO_COUNT, FIFO_CLEAR};
			flags_dev = {FIFO_FULL, FIFO_EMPTY};
			
			field {
				 name = "Payload";
				 prefix = "PAYLOAD";
				 size = 32;
				 type = SLV;
			};
	 };

	 reg {
			name = "SSR Reg";
			prefix = "SSR";
			field {
				 name = "SSR Outputs";
				 description = "Solid State Relay outputs to the ADC mezzanine. Not used for the moment";
				 type = SLV;
				 size = 32;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
				 clock = "clk_wr_i";
			};
	 };

	 reg {
			name = "Control Reg";
			prefix = "CR";

			field {
				 prefix = "ENABLE";
				 name = "ENABLE";
				 description = "write 1: enables sampling and compression of the phase data. The ADC FIFO is filled with compressed phase records";
				 type = BIT;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
			};

	 };

	  reg {
			name = "Error min";
			prefix = "RL_ERR_MIN";

			field {
				 name = "MinError";
				 description = "Lower error bound (negative) for phase error for the compression algorithm";
				 type = SLV;
				 size = 32;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
				 clock = "clk_wr_i";
			};

	 };
	 reg {
			name = "Error max";
			prefix = "RL_ERR_MAX";

			field {
				 name = "MaxError";
				 description = "Upper error bound (positive) for phase error for the compression algorithm";
				 type = SLV;
				 size = 32;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
				 clock = "clk_wr_i";
			};

	 };

	 reg {
			name = "Max run length";
			prefix = "RL_LENGTH_MAX";

			field {
				 name = "RLMax";
				 description = "Maximum number of samples in a single run-length record.";
				 type = SLV;
				 size = 16;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
				 clock = "clk_wr_i";
			};

	 };


	 reg {
			name = "Transient threshold (phase)";
			prefix = "TRANSIENT_THRESHOLD_PHASE";

			field {
				 name = "Phase";
				 description = "";
				 type = SLV;
				 size = 16;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
				 clock = "clk_wr_i";
			};

	 };

 reg {
			name = "Transient threshold (number of samples)";
			prefix = "TRANSIENT_THRESHOLD_COUNT";

			field {
				 name = "Count";
				 description = "";
				 type = SLV;
				 size = 6;
				 access_dev = READ_ONLY;
				 access_bus = READ_WRITE;
				 clock = "clk_wr_i";
			};

	 };

     reg {
			name = "Fixed record count";
			prefix = "CNT_FIXED";

			field {
				 name = "Count";
				 description = "Number of fixed phase records produced by the compression engine.";
				 type = SLV;
				 size = 32;
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
				 clock = "clk_wr_i";
			};

	 };

     reg {
			name = "LT Run Length record count";
			prefix = "LT_CNT_RL";

			field {
				 name = "Count";
				 description = "Number of LT run length records produced by the compression engine.";
				 type = SLV;
				 size = 32;
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
				 clock = "clk_wr_i";
			};

	 };

     reg {
			name = "ST Run Length record count";
			prefix = "ST_CNT_RL";

			field {
				 name = "Count";
				 description = "Number of run ST length records produced by the compression engine.";
				 type = SLV;
				 size = 32;
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
				 clock = "clk_wr_i";
			};

	 };

     reg {
			name = "Timestamp record count";
			prefix = "CNT_TSTAMP";

			field {
				 name = "Count";
				 description = "Number of timestamp records produced by the compression engine.";
				 type = SLV;
				 size = 32;
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
				 clock = "clk_wr_i";
			};

	 };
	 

};
