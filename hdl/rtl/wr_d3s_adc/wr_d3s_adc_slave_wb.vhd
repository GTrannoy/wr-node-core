---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WR D3S WB (slave)
---------------------------------------------------------------------------------------
-- File           : wr_d3s_adc_slave_wb.vhd
-- Author         : auto-generated by wbgen2 from wr_d3s_adc_slave.wb
-- Created        : Fri Jan 13 13:15:03 2017
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wr_d3s_adc_slave.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

use work.d3ss_wbgen2_pkg.all;


entity d3ss_adc_slave_wb is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(3 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    clk_wr_i                                 : in     std_logic;
    regs_i                                   : in     t_d3ss_in_registers;
    regs_o                                   : out    t_d3ss_out_registers
  );
end d3ss_adc_slave_wb;

architecture syn of d3ss_adc_slave_wb is

signal d3ss_rstr_pll_rst_int                    : std_logic      ;
signal d3ss_tcr_wr_lock_en_int                  : std_logic      ;
signal d3ss_gpior_pll_sys_cs_n_int              : std_logic      ;
signal d3ss_gpior_pll_sys_reset_n_int           : std_logic      ;
signal d3ss_gpior_pll_sclk_int                  : std_logic      ;
signal d3ss_gpior_pll_sdio_dir_int              : std_logic      ;
signal d3ss_gpior_pll_vcxo_reset_n_int          : std_logic      ;
signal d3ss_gpior_pll_vcxo_cs_n_int             : std_logic      ;
signal d3ss_gpior_adf_ce_int                    : std_logic      ;
signal d3ss_gpior_adf_clk_int                   : std_logic      ;
signal d3ss_gpior_adf_le_int                    : std_logic      ;
signal d3ss_gpior_adf_data_int                  : std_logic      ;
signal d3ss_phfifo_rst_n                        : std_logic      ;
signal d3ss_phfifo_in_int                       : std_logic_vector(31 downto 0);
signal d3ss_phfifo_out_int                      : std_logic_vector(31 downto 0);
signal d3ss_phfifo_wrreq_int                    : std_logic      ;
signal d3ss_cr_enable_int                       : std_logic      ;
signal d3ss_rec_delay_coarse_int                : std_logic_vector(15 downto 0);
signal d3ss_rec_delay_coarse_swb                : std_logic      ;
signal d3ss_rec_delay_coarse_swb_delay          : std_logic      ;
signal d3ss_rec_delay_coarse_swb_s0             : std_logic      ;
signal d3ss_rec_delay_coarse_swb_s1             : std_logic      ;
signal d3ss_rec_delay_coarse_swb_s2             : std_logic      ;
signal d3ss_frev_ts_sec_int                     : std_logic_vector(31 downto 0);
signal d3ss_frev_ts_sec_swb                     : std_logic      ;
signal d3ss_frev_ts_sec_swb_delay               : std_logic      ;
signal d3ss_frev_ts_sec_swb_s0                  : std_logic      ;
signal d3ss_frev_ts_sec_swb_s1                  : std_logic      ;
signal d3ss_frev_ts_sec_swb_s2                  : std_logic      ;
signal d3ss_frev_ts_ns_int                      : std_logic_vector(31 downto 0);
signal d3ss_frev_ts_ns_swb                      : std_logic      ;
signal d3ss_frev_ts_ns_swb_delay                : std_logic      ;
signal d3ss_frev_ts_ns_swb_s0                   : std_logic      ;
signal d3ss_frev_ts_ns_swb_s1                   : std_logic      ;
signal d3ss_frev_ts_ns_swb_s2                   : std_logic      ;
signal d3ss_frev_cr_valid_int                   : std_logic      ;
signal d3ss_frev_cr_valid_int_delay             : std_logic      ;
signal d3ss_frev_cr_valid_sync0                 : std_logic      ;
signal d3ss_frev_cr_valid_sync1                 : std_logic      ;
signal d3ss_frev_cr_valid_sync2                 : std_logic      ;
signal d3ss_frev_cr_ready_sync0                 : std_logic      ;
signal d3ss_frev_cr_ready_sync1                 : std_logic      ;
signal d3ss_phfifo_full_int                     : std_logic      ;
signal d3ss_phfifo_empty_int                    : std_logic      ;
signal d3ss_phfifo_clear_bus_int                : std_logic      ;
signal d3ss_phfifo_usedw_int                    : std_logic_vector(13 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(3 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      d3ss_rstr_pll_rst_int <= '0';
      d3ss_tcr_wr_lock_en_int <= '0';
      d3ss_gpior_pll_sys_cs_n_int <= '0';
      d3ss_gpior_pll_sys_reset_n_int <= '0';
      d3ss_gpior_pll_sclk_int <= '0';
      regs_o.gpior_pll_sdio_load_o <= '0';
      d3ss_gpior_pll_sdio_dir_int <= '0';
      d3ss_gpior_pll_vcxo_reset_n_int <= '0';
      d3ss_gpior_pll_vcxo_cs_n_int <= '0';
      d3ss_gpior_adf_ce_int <= '0';
      d3ss_gpior_adf_clk_int <= '0';
      d3ss_gpior_adf_le_int <= '0';
      d3ss_gpior_adf_data_int <= '0';
      d3ss_cr_enable_int <= '0';
      d3ss_rec_delay_coarse_int <= "0000000000000000";
      d3ss_rec_delay_coarse_swb <= '0';
      d3ss_rec_delay_coarse_swb_delay <= '0';
      d3ss_frev_ts_sec_int <= "00000000000000000000000000000000";
      d3ss_frev_ts_sec_swb <= '0';
      d3ss_frev_ts_sec_swb_delay <= '0';
      d3ss_frev_ts_ns_int <= "00000000000000000000000000000000";
      d3ss_frev_ts_ns_swb <= '0';
      d3ss_frev_ts_ns_swb_delay <= '0';
      d3ss_frev_cr_valid_int <= '0';
      d3ss_frev_cr_valid_int_delay <= '0';
      d3ss_phfifo_clear_bus_int <= '0';
      d3ss_phfifo_wrreq_int <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          regs_o.gpior_pll_sdio_load_o <= '0';
          d3ss_phfifo_wrreq_int <= '0';
          d3ss_phfifo_clear_bus_int <= '0';
          ack_in_progress <= '0';
        else
          regs_o.gpior_pll_sdio_load_o <= '0';
          d3ss_rec_delay_coarse_swb <= d3ss_rec_delay_coarse_swb_delay;
          d3ss_rec_delay_coarse_swb_delay <= '0';
          d3ss_frev_ts_sec_swb <= d3ss_frev_ts_sec_swb_delay;
          d3ss_frev_ts_sec_swb_delay <= '0';
          d3ss_frev_ts_ns_swb <= d3ss_frev_ts_ns_swb_delay;
          d3ss_frev_ts_ns_swb_delay <= '0';
          d3ss_frev_cr_valid_int <= d3ss_frev_cr_valid_int_delay;
          d3ss_frev_cr_valid_int_delay <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(3 downto 0) is
          when "0000" => 
            if (wb_we_i = '1') then
              d3ss_rstr_pll_rst_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= d3ss_rstr_pll_rst_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0001" => 
            if (wb_we_i = '1') then
              d3ss_tcr_wr_lock_en_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= d3ss_tcr_wr_lock_en_int;
            rddata_reg(1) <= regs_i.tcr_wr_locked_i;
            rddata_reg(2) <= regs_i.tcr_wr_time_valid_i;
            rddata_reg(3) <= regs_i.tcr_wr_link_i;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0010" => 
            if (wb_we_i = '1') then
              d3ss_gpior_pll_sys_cs_n_int <= wrdata_reg(0);
              d3ss_gpior_pll_sys_reset_n_int <= wrdata_reg(1);
              d3ss_gpior_pll_sclk_int <= wrdata_reg(2);
              regs_o.gpior_pll_sdio_load_o <= '1';
              d3ss_gpior_pll_sdio_dir_int <= wrdata_reg(4);
              d3ss_gpior_pll_vcxo_reset_n_int <= wrdata_reg(5);
              d3ss_gpior_pll_vcxo_cs_n_int <= wrdata_reg(6);
              d3ss_gpior_adf_ce_int <= wrdata_reg(8);
              d3ss_gpior_adf_clk_int <= wrdata_reg(9);
              d3ss_gpior_adf_le_int <= wrdata_reg(10);
              d3ss_gpior_adf_data_int <= wrdata_reg(11);
            end if;
            rddata_reg(0) <= d3ss_gpior_pll_sys_cs_n_int;
            rddata_reg(1) <= d3ss_gpior_pll_sys_reset_n_int;
            rddata_reg(2) <= d3ss_gpior_pll_sclk_int;
            rddata_reg(3) <= regs_i.gpior_pll_sdio_i;
            rddata_reg(4) <= d3ss_gpior_pll_sdio_dir_int;
            rddata_reg(5) <= d3ss_gpior_pll_vcxo_reset_n_int;
            rddata_reg(6) <= d3ss_gpior_pll_vcxo_cs_n_int;
            rddata_reg(7) <= regs_i.gpior_pll_vcxo_sdo_i;
            rddata_reg(8) <= d3ss_gpior_adf_ce_int;
            rddata_reg(9) <= d3ss_gpior_adf_clk_int;
            rddata_reg(10) <= d3ss_gpior_adf_le_int;
            rddata_reg(11) <= d3ss_gpior_adf_data_int;
            rddata_reg(12) <= regs_i.gpior_serdes_pll_locked_i;
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011" => 
            if (wb_we_i = '1') then
              d3ss_cr_enable_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= d3ss_cr_enable_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100" => 
            if (wb_we_i = '1') then
              d3ss_rec_delay_coarse_int <= wrdata_reg(15 downto 0);
              d3ss_rec_delay_coarse_swb <= '1';
              d3ss_rec_delay_coarse_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= d3ss_rec_delay_coarse_int;
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0101" => 
            if (wb_we_i = '1') then
              d3ss_frev_ts_sec_int <= wrdata_reg(31 downto 0);
              d3ss_frev_ts_sec_swb <= '1';
              d3ss_frev_ts_sec_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= d3ss_frev_ts_sec_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0110" => 
            if (wb_we_i = '1') then
              d3ss_frev_ts_ns_int <= wrdata_reg(31 downto 0);
              d3ss_frev_ts_ns_swb <= '1';
              d3ss_frev_ts_ns_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= d3ss_frev_ts_ns_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0111" => 
            if (wb_we_i = '1') then
              d3ss_frev_cr_valid_int <= wrdata_reg(0);
              d3ss_frev_cr_valid_int_delay <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(1) <= d3ss_frev_cr_ready_sync1;
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1000" => 
            if (wb_we_i = '1') then
              d3ss_phfifo_in_int(31 downto 0) <= wrdata_reg(31 downto 0);
              d3ss_phfifo_wrreq_int <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001" => 
            if (wb_we_i = '1') then
              if (wrdata_reg(18) = '1') then
                d3ss_phfifo_clear_bus_int <= '1';
              end if;
            end if;
            rddata_reg(16) <= d3ss_phfifo_full_int;
            rddata_reg(17) <= d3ss_phfifo_empty_int;
            rddata_reg(18) <= '0';
            rddata_reg(13 downto 0) <= d3ss_phfifo_usedw_int;
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- FPGA REF/Serdes PLL Reset
  regs_o.rstr_pll_rst_o <= d3ss_rstr_pll_rst_int;
-- WR Lock Enable
  regs_o.tcr_wr_lock_en_o <= d3ss_tcr_wr_lock_en_int;
-- WR Locked
-- WR Time Valid
-- WR Link
-- System PLL CS
  regs_o.gpior_pll_sys_cs_n_o <= d3ss_gpior_pll_sys_cs_n_int;
-- System Reset
  regs_o.gpior_pll_sys_reset_n_o <= d3ss_gpior_pll_sys_reset_n_int;
-- PLL SCLK (shared)
  regs_o.gpior_pll_sclk_o <= d3ss_gpior_pll_sclk_int;
-- PLL SDIO (shared)
  regs_o.gpior_pll_sdio_o <= wrdata_reg(3);
-- PLL SDIO direction (shared)
  regs_o.gpior_pll_sdio_dir_o <= d3ss_gpior_pll_sdio_dir_int;
-- VCXO PLL Reset
  regs_o.gpior_pll_vcxo_reset_n_o <= d3ss_gpior_pll_vcxo_reset_n_int;
-- VCXO PLL Chip Select
  regs_o.gpior_pll_vcxo_cs_n_o <= d3ss_gpior_pll_vcxo_cs_n_int;
-- VCXO PLL SDO
-- ADF4002 Chip Enable
  regs_o.gpior_adf_ce_o <= d3ss_gpior_adf_ce_int;
-- ADF4002 Clock
  regs_o.gpior_adf_clk_o <= d3ss_gpior_adf_clk_int;
-- ADF4002 Latch Enable
  regs_o.gpior_adf_le_o <= d3ss_gpior_adf_le_int;
-- ADF4002 Data
  regs_o.gpior_adf_data_o <= d3ss_gpior_adf_data_int;
-- Serdes PLL locked
-- extra code for reg/fifo/mem: Phase Data FIFO
  regs_o.phfifo_payload_o <= d3ss_phfifo_out_int(31 downto 0);
  d3ss_phfifo_rst_n <= rst_n_i and (not d3ss_phfifo_clear_bus_int);
  d3ss_phfifo_INST : wbgen2_fifo_async
    generic map (
      g_size               => 16384,
      g_width              => 32,
      g_usedw_size         => 14
    )
    port map (
      rd_req_i             => regs_i.phfifo_rd_req_i,
      rd_full_o            => regs_o.phfifo_rd_full_o,
      rd_empty_o           => regs_o.phfifo_rd_empty_o,
      wr_full_o            => d3ss_phfifo_full_int,
      wr_empty_o           => d3ss_phfifo_empty_int,
      wr_usedw_o           => d3ss_phfifo_usedw_int,
      wr_req_i             => d3ss_phfifo_wrreq_int,
      rst_n_i              => d3ss_phfifo_rst_n,
      rd_clk_i             => clk_wr_i,
      wr_clk_i             => clk_sys_i,
      wr_data_i            => d3ss_phfifo_in_int,
      rd_data_o            => d3ss_phfifo_out_int
    );
  
-- ENABLE
  regs_o.cr_enable_o <= d3ss_cr_enable_int;
-- Delay
-- asynchronous std_logic_vector register : Delay (type RW/RO, clk_wr_i <-> clk_sys_i)
  process (clk_wr_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      d3ss_rec_delay_coarse_swb_s0 <= '0';
      d3ss_rec_delay_coarse_swb_s1 <= '0';
      d3ss_rec_delay_coarse_swb_s2 <= '0';
      regs_o.rec_delay_coarse_o <= "0000000000000000";
    elsif rising_edge(clk_wr_i) then
      d3ss_rec_delay_coarse_swb_s0 <= d3ss_rec_delay_coarse_swb;
      d3ss_rec_delay_coarse_swb_s1 <= d3ss_rec_delay_coarse_swb_s0;
      d3ss_rec_delay_coarse_swb_s2 <= d3ss_rec_delay_coarse_swb_s1;
      if ((d3ss_rec_delay_coarse_swb_s2 = '0') and (d3ss_rec_delay_coarse_swb_s1 = '1')) then
        regs_o.rec_delay_coarse_o <= d3ss_rec_delay_coarse_int;
      end if;
    end if;
  end process;
  
  
-- Seconds
-- asynchronous std_logic_vector register : Seconds (type RW/RO, clk_wr_i <-> clk_sys_i)
  process (clk_wr_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      d3ss_frev_ts_sec_swb_s0 <= '0';
      d3ss_frev_ts_sec_swb_s1 <= '0';
      d3ss_frev_ts_sec_swb_s2 <= '0';
      regs_o.frev_ts_sec_o <= "00000000000000000000000000000000";
    elsif rising_edge(clk_wr_i) then
      d3ss_frev_ts_sec_swb_s0 <= d3ss_frev_ts_sec_swb;
      d3ss_frev_ts_sec_swb_s1 <= d3ss_frev_ts_sec_swb_s0;
      d3ss_frev_ts_sec_swb_s2 <= d3ss_frev_ts_sec_swb_s1;
      if ((d3ss_frev_ts_sec_swb_s2 = '0') and (d3ss_frev_ts_sec_swb_s1 = '1')) then
        regs_o.frev_ts_sec_o <= d3ss_frev_ts_sec_int;
      end if;
    end if;
  end process;
  
  
-- NanoSeconds
-- asynchronous std_logic_vector register : NanoSeconds (type RW/RO, clk_wr_i <-> clk_sys_i)
  process (clk_wr_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      d3ss_frev_ts_ns_swb_s0 <= '0';
      d3ss_frev_ts_ns_swb_s1 <= '0';
      d3ss_frev_ts_ns_swb_s2 <= '0';
      regs_o.frev_ts_ns_o <= "00000000000000000000000000000000";
    elsif rising_edge(clk_wr_i) then
      d3ss_frev_ts_ns_swb_s0 <= d3ss_frev_ts_ns_swb;
      d3ss_frev_ts_ns_swb_s1 <= d3ss_frev_ts_ns_swb_s0;
      d3ss_frev_ts_ns_swb_s2 <= d3ss_frev_ts_ns_swb_s1;
      if ((d3ss_frev_ts_ns_swb_s2 = '0') and (d3ss_frev_ts_ns_swb_s1 = '1')) then
        regs_o.frev_ts_ns_o <= d3ss_frev_ts_ns_int;
      end if;
    end if;
  end process;
  
  
-- Push FRev timestamp
  process (clk_wr_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.frev_cr_valid_o <= '0';
      d3ss_frev_cr_valid_sync0 <= '0';
      d3ss_frev_cr_valid_sync1 <= '0';
      d3ss_frev_cr_valid_sync2 <= '0';
    elsif rising_edge(clk_wr_i) then
      d3ss_frev_cr_valid_sync0 <= d3ss_frev_cr_valid_int;
      d3ss_frev_cr_valid_sync1 <= d3ss_frev_cr_valid_sync0;
      d3ss_frev_cr_valid_sync2 <= d3ss_frev_cr_valid_sync1;
      regs_o.frev_cr_valid_o <= d3ss_frev_cr_valid_sync2 and (not d3ss_frev_cr_valid_sync1);
    end if;
  end process;
  
  
-- Ready
-- synchronizer chain for field : Ready (type RO/WO, clk_wr_i -> clk_sys_i)
  process (clk_wr_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      d3ss_frev_cr_ready_sync0 <= '0';
      d3ss_frev_cr_ready_sync1 <= '0';
    elsif rising_edge(clk_wr_i) then
      d3ss_frev_cr_ready_sync0 <= regs_i.frev_cr_ready_i;
      d3ss_frev_cr_ready_sync1 <= d3ss_frev_cr_ready_sync0;
    end if;
  end process;
  
  
-- extra code for reg/fifo/mem: FIFO 'Phase Data FIFO' data input register 0
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
