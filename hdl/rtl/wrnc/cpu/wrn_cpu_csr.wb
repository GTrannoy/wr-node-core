-- -*- Mode: LUA; tab-width: 2 -*-

-------------------------------------------------------------------------------
-- Title      : White Rabbit Node Core
-- Project    : White Rabbit
-------------------------------------------------------------------------------
-- File       : wrn_cpu_csr.wb
-- Author     : Tomasz WÅ‚ostowski
-- Company    : CERN BE-CO-HT
-- Created    : 2014-04-01
-- Last update: 2014-11-26
-------------------------------------------------------------------------------
-- Description: 
--
-- CPU Control/Status Registers block layout (wbgen2)
-------------------------------------------------------------------------------
--
-- Copyright (c) 2014 CERN
--
-- This source file is free software; you can redistribute it   
-- and/or modify it under the terms of the GNU Lesser General   
-- Public License as published by the Free Software Foundation; 
-- either version 2.1 of the License, or (at your option) any   
-- later version.                                               
--
-- This source is distributed in the hope that it will be       
-- useful, but WITHOUT ANY WARRANTY; without even the implied   
-- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      
-- PURPOSE.  See the GNU Lesser General Public License for more 
-- details.                                                     
--
-- You should have received a copy of the GNU Lesser General    
-- Public License along with this source; if not, download it   
-- from http://www.gnu.org/licenses/lgpl-2.1.html
--
-------------------------------------------------------------------------------

peripheral {
	 name = "WR Node CPU Control/Status registers block";
	 prefix = "wrn_cpu_csr";
	 hdl_entity = "wrn_cpu_csr_wb_slave";

	 reg {
			name = "Application ID Register";
 		  prefix = "APP_ID";
 			
			field {
			   name = "User application ID";
		   
				 type = SLV;
				 size = 32;
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
	 };

	 reg {
			name = "CPU Reset Register";
			prefix = "RESET";

			field {
				 name = "CPU reset lines";
				 size = 8;
				 type = SLV;
				 reset_value = 0xff;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
	 };

	 reg {
			name = "CPU Enable Register";
			prefix = "ENABLE";

			field {
				 name = "CPU enable lines";
				 size = 8;
				 type = SLV;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
	 };

	 reg {
			name = "CPU Upload Address Register";
			prefix = "UADDR";

			field {
				 name = "Address";
				 prefix = "ADDR";				 
				 size = 20;
				 type = SLV;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
	 };

   reg {
      name = "Core Select Register";
      prefix = "CORE_SEL";
			field {
				 name = "CPU core select";
				 size = 4;
				 type = SLV;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
   };
  
  reg {
      name = "Core Count Register";
      prefix = "CORE_COUNT";
			field {
				 name = "Number of CPU Cores";
				 size = 4;
				 type = SLV;
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
   };

  reg {
      name = "Core Memory Size";
      prefix = "CORE_MEMSIZE";
			field {
				 name = "Memory size for the selected core.";
				 size = 32;
				 type = SLV;
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
   };

	 reg {
			name = "CPU Upload Data Register";
			prefix = "UDATA";

			field {
				 name = "CPU IRAM read/write data";
				 size = 32;
				 type = SLV;
				 access_bus = READ_WRITE;
				 access_dev = READ_WRITE;
				 load = LOAD_EXT;
			};
	 };


   reg {
      name = "CPU Debug Register";
      prefix = "DBG_JTAG";
      
      field {
         name = "JTAG data";
         prefix = "jdata";
         size = 8;
         type = SLV;
         access_bus = READ_WRITE;
         access_dev = READ_WRITE;
         load = LOAD_EXT;
      };

      
      field {
         name = "JTAG address";
         prefix = "jaddr";
         align = 8;
         size = 3;
         type = SLV;
         access_bus = READ_WRITE;
         access_dev = READ_WRITE;
         load = LOAD_EXT;

      };

      field {
         name = "JTAG reset";
         prefix = "rstn";
         align = 8;
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_WRITE;
         load = LOAD_EXT;

      };

      field {
         name = "JTAG TCK";
         prefix = "tck";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_WRITE;
         load = LOAD_EXT;

      };

      field {
         name = "JTAG Update";
         prefix = "update";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_WRITE;
         load = LOAD_EXT;
      };
   };

	 reg {
			name = "CPU Debug Message Register";
			prefix = "DBG_MSG";

			field {
				 prefix = "DATA";
				 name = "Debug message byte for the selected core";
				 type = SLV;
				 size = 8;
				 ack_read = "dbg_msg_data_rd_ack_o";
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
	 };

   reg {
			name = "CPU Debug Messge Poll Register";
			prefix = "DBG_POLL";

			field {
				 prefix = "READY";
				 name = "Debug Message data available";
				 type = SLV;
				 size = 8;
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
   };

  reg {
			name = "CPU Debug Messge Interrupt Mask Register";
			prefix = "DBG_IMSK";

			field {
				 prefix = "ENABLE";
				 name = "Per-CPU Debug Message Interrupt Enable";
				 description = "1: IRQ enabled";
				 type = SLV;
				 size = 8;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
   };

	reg {
		 name = "SMEM Operation Select";
		 description = "Selects the operation mode for Shared Memory writes from host";
		 prefix = "SMEM_OP";

		 field {
				name = "Operation code";
				description = "0x0: write\
0x1: add\
0x2: subtract\
0x3: bit set\
0x3: bit clear\
0x3: bit flip";
				type = SLV;
				size = 3;
access_bus = READ_WRITE;
access_dev = READ_ONLY;
		 };
	};
};

