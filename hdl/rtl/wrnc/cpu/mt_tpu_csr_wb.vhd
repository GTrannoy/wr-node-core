---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Mock Turtle Trace/Priofile Unit Control Registers Block
---------------------------------------------------------------------------------------
-- File           : mt_tpu_csr_wb.vhd
-- Author         : auto-generated by wbgen2 from mt_tpu_csr.wb
-- Created        : Wed Jan 25 15:13:16 2017
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE mt_tpu_csr.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.tpu_wbgen2_pkg.all;


entity mt_tpu_csr_wb_slave is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(2 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    regs_i                                   : in     t_tpu_in_registers;
    regs_o                                   : out    t_tpu_out_registers
  );
end mt_tpu_csr_wb_slave;

architecture syn of mt_tpu_csr_wb_slave is

signal tpu_csr_enable_int                       : std_logic      ;
signal tpu_csr_force_start_dly0                 : std_logic      ;
signal tpu_csr_force_start_int                  : std_logic      ;
signal tpu_csr_probe_sel_int                    : std_logic_vector(4 downto 0);
signal tpu_buf_addr_int                         : std_logic_vector(15 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(2 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      tpu_csr_enable_int <= '0';
      tpu_csr_force_start_int <= '0';
      tpu_csr_probe_sel_int <= "00000";
      regs_o.probe_csr_pc_load_o <= '0';
      regs_o.probe_csr_core_id_load_o <= '0';
      regs_o.probe_csr_action_load_o <= '0';
      tpu_buf_addr_int <= "0000000000000000";
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          tpu_csr_force_start_int <= '0';
          regs_o.probe_csr_pc_load_o <= '0';
          regs_o.probe_csr_core_id_load_o <= '0';
          regs_o.probe_csr_action_load_o <= '0';
          ack_in_progress <= '0';
        else
          regs_o.probe_csr_pc_load_o <= '0';
          regs_o.probe_csr_core_id_load_o <= '0';
          regs_o.probe_csr_action_load_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(2 downto 0) is
          when "000" => 
            if (wb_we_i = '1') then
              tpu_csr_enable_int <= wrdata_reg(1);
              tpu_csr_force_start_int <= wrdata_reg(2);
              tpu_csr_probe_sel_int <= wrdata_reg(13 downto 9);
            end if;
            rddata_reg(0) <= regs_i.csr_present_i;
            rddata_reg(1) <= tpu_csr_enable_int;
            rddata_reg(2) <= '0';
            rddata_reg(3) <= regs_i.csr_ready_i;
            rddata_reg(8 downto 4) <= regs_i.csr_probe_count_i;
            rddata_reg(13 downto 9) <= tpu_csr_probe_sel_int;
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when "001" => 
            if (wb_we_i = '1') then
              regs_o.probe_csr_pc_load_o <= '1';
              regs_o.probe_csr_core_id_load_o <= '1';
              regs_o.probe_csr_action_load_o <= '1';
            end if;
            rddata_reg(23 downto 0) <= regs_i.probe_csr_pc_i;
            rddata_reg(27 downto 24) <= regs_i.probe_csr_core_id_i;
            rddata_reg(31 downto 28) <= regs_i.probe_csr_action_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.buf_count_i;
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.buf_size_i;
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100" => 
            if (wb_we_i = '1') then
              tpu_buf_addr_int <= wrdata_reg(15 downto 0);
            end if;
            rddata_reg(15 downto 0) <= tpu_buf_addr_int;
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(4 downto 0) <= regs_i.buf_data_id_i;
            rddata_reg(31 downto 5) <= regs_i.buf_data_tstamp_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Present
-- Enable
  regs_o.csr_enable_o <= tpu_csr_enable_int;
-- Force Start
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tpu_csr_force_start_dly0 <= '0';
      regs_o.csr_force_start_o <= '0';
    elsif rising_edge(clk_sys_i) then
      tpu_csr_force_start_dly0 <= tpu_csr_force_start_int;
      regs_o.csr_force_start_o <= tpu_csr_force_start_int and (not tpu_csr_force_start_dly0);
    end if;
  end process;
  
  
-- Ready
-- Probe Count
-- Probe Select
  regs_o.csr_probe_sel_o <= tpu_csr_probe_sel_int;
-- Program Counter match value
  regs_o.probe_csr_pc_o <= wrdata_reg(23 downto 0);
-- Core select for PC match
  regs_o.probe_csr_core_id_o <= wrdata_reg(27 downto 24);
-- Action
  regs_o.probe_csr_action_o <= wrdata_reg(31 downto 28);
-- Count
-- Size
-- Address
  regs_o.buf_addr_o <= tpu_buf_addr_int;
-- Probe ID the timestamp corresponds to
-- Timestamp (in system clock ticks)
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
