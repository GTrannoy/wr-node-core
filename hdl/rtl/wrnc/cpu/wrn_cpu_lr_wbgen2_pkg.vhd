---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WR Node CPU Local Registers
---------------------------------------------------------------------------------------
-- File           : wrn_cpu_lr_wbgen2_pkg.vhd
-- Author         : auto-generated by wbgen2 from wrn_cpu_lr.wb
-- Created        : Thu Aug 13 10:15:46 2015
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wrn_cpu_lr.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package wrn_cpu_lr_wbgen2_pkg is
  
  
  -- Input registers (user design -> WB slave)
  
  type t_wrn_cpu_lr_in_registers is record
    poll_hmq_i                               : std_logic_vector(15 downto 0);
    poll_rmq_i                               : std_logic_vector(15 downto 0);
    stat_wr_link_i                           : std_logic;
    stat_wr_time_ok_i                        : std_logic;
    stat_wr_aux_clock_ok_i                   : std_logic_vector(7 downto 0);
    stat_core_id_i                           : std_logic_vector(3 downto 0);
    tai_cycles_i                             : std_logic_vector(27 downto 0);
    tai_sec_i                                : std_logic_vector(31 downto 0);
    gpio_in_i                                : std_logic_vector(31 downto 0);
    delay_cnt_i                              : std_logic_vector(31 downto 0);
    app_id_i                                 : std_logic_vector(31 downto 0);
    end record;
  
  constant c_wrn_cpu_lr_in_registers_init_value: t_wrn_cpu_lr_in_registers := (
    poll_hmq_i => (others => '0'),
    poll_rmq_i => (others => '0'),
    stat_wr_link_i => '0',
    stat_wr_time_ok_i => '0',
    stat_wr_aux_clock_ok_i => (others => '0'),
    stat_core_id_i => (others => '0'),
    tai_cycles_i => (others => '0'),
    tai_sec_i => (others => '0'),
    gpio_in_i => (others => '0'),
    delay_cnt_i => (others => '0'),
    app_id_i => (others => '0')
    );
    
    -- Output registers (WB slave -> user design)
    
    type t_wrn_cpu_lr_out_registers is record
      gpio_set_o                               : std_logic_vector(31 downto 0);
      gpio_set_wr_o                            : std_logic;
      gpio_clear_o                             : std_logic_vector(31 downto 0);
      gpio_clear_wr_o                          : std_logic;
      dbg_chr_o                                : std_logic_vector(7 downto 0);
      dbg_chr_wr_o                             : std_logic;
      delay_cnt_o                              : std_logic_vector(31 downto 0);
      delay_cnt_load_o                         : std_logic;
      end record;
    
    constant c_wrn_cpu_lr_out_registers_init_value: t_wrn_cpu_lr_out_registers := (
      gpio_set_o => (others => '0'),
      gpio_set_wr_o => '0',
      gpio_clear_o => (others => '0'),
      gpio_clear_wr_o => '0',
      dbg_chr_o => (others => '0'),
      dbg_chr_wr_o => '0',
      delay_cnt_o => (others => '0'),
      delay_cnt_load_o => '0'
      );
    function "or" (left, right: t_wrn_cpu_lr_in_registers) return t_wrn_cpu_lr_in_registers;
    function f_x_to_zero (x:std_logic) return std_logic;
    function f_x_to_zero (x:std_logic_vector) return std_logic_vector;
end package;

package body wrn_cpu_lr_wbgen2_pkg is
function f_x_to_zero (x:std_logic) return std_logic is
begin
if x = '1' then
return '1';
else
return '0';
end if;
end function;
function f_x_to_zero (x:std_logic_vector) return std_logic_vector is
variable tmp: std_logic_vector(x'length-1 downto 0);
begin
for i in 0 to x'length-1 loop
if(x(i) = 'X' or x(i) = 'U') then
tmp(i):= '0';
else
tmp(i):=x(i);
end if; 
end loop; 
return tmp;
end function;
function "or" (left, right: t_wrn_cpu_lr_in_registers) return t_wrn_cpu_lr_in_registers is
variable tmp: t_wrn_cpu_lr_in_registers;
begin
tmp.poll_hmq_i := f_x_to_zero(left.poll_hmq_i) or f_x_to_zero(right.poll_hmq_i);
tmp.poll_rmq_i := f_x_to_zero(left.poll_rmq_i) or f_x_to_zero(right.poll_rmq_i);
tmp.stat_wr_link_i := f_x_to_zero(left.stat_wr_link_i) or f_x_to_zero(right.stat_wr_link_i);
tmp.stat_wr_time_ok_i := f_x_to_zero(left.stat_wr_time_ok_i) or f_x_to_zero(right.stat_wr_time_ok_i);
tmp.stat_wr_aux_clock_ok_i := f_x_to_zero(left.stat_wr_aux_clock_ok_i) or f_x_to_zero(right.stat_wr_aux_clock_ok_i);
tmp.stat_core_id_i := f_x_to_zero(left.stat_core_id_i) or f_x_to_zero(right.stat_core_id_i);
tmp.tai_cycles_i := f_x_to_zero(left.tai_cycles_i) or f_x_to_zero(right.tai_cycles_i);
tmp.tai_sec_i := f_x_to_zero(left.tai_sec_i) or f_x_to_zero(right.tai_sec_i);
tmp.gpio_in_i := f_x_to_zero(left.gpio_in_i) or f_x_to_zero(right.gpio_in_i);
tmp.delay_cnt_i := f_x_to_zero(left.delay_cnt_i) or f_x_to_zero(right.delay_cnt_i);
tmp.app_id_i := f_x_to_zero(left.app_id_i) or f_x_to_zero(right.app_id_i);
return tmp;
end function;
end package body;
