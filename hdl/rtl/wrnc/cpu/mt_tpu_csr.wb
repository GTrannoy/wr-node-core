-- -*- Mode: LUA; tab-width: 2 -*-

-------------------------------------------------------------------------------
-- Title      : Mock Turtle Trace/Profile Unit
-- Project    : Mock Turtle
-------------------------------------------------------------------------------
-- File       : mt_tpu_csr.wb
-- Author     : Tomasz WÅ‚ostowski
-- Company    : CERN BE-CO-HT
-- Created    : 2014-04-01
-- Last update: 2014-11-26
-------------------------------------------------------------------------------
-- Description: 
--
-- CPU Control/Status Registers block layout (wbgen2)
-------------------------------------------------------------------------------
--
-- Copyright (c) 2014 CERN
--
-- This source file is free software; you can redistribute it   
-- and/or modify it under the terms of the GNU Lesser General   
-- Public License as published by the Free Software Foundation; 
-- either version 2.1 of the License, or (at your option) any   
-- later version.                                               
--
-- This source is distributed in the hope that it will be       
-- useful, but WITHOUT ANY WARRANTY; without even the implied   
-- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      
-- PURPOSE.  See the GNU Lesser General Public License for more 
-- details.                                                     
--
-- You should have received a copy of the GNU Lesser General    
-- Public License along with this source; if not, download it   
-- from http://www.gnu.org/licenses/lgpl-2.1.html
--
-------------------------------------------------------------------------------

peripheral {
	 name = "Mock Turtle Trace/Priofile Unit Control Registers Block";
	 prefix = "mt_tpu_csr";
	 hdl_entity = "mt_tpu_csr_wb_slave";


	reg {
		 name = "TPU Control/Status Register";
		 description = "Controls the Trace/Profile Unit (TPU) if available";
		 prefix = "CSR";

		 field {
				name = "Present";
				prefix = "PRESENT";
				description = "1: TPU is present";
				type = BIT;
				access_bus = READ_ONLY;
				access_dev = WRITE_ONLY;
		 };

		 field {
				name = "Enable";
				prefix = "ENABLE";
				description = "1: enable TPU";
				type = BIT;
				access_bus = READ_WRITE;
				access_dev = READ_ONLY;
		 };

		 field {
				name = "Force Start";
				prefix = "FORCE_START";
				description = "write 1: Forces TPU logging start";
				type = MONOSTABLE;
		 };

		 field {
				name = "Ready";
				prefix = "READY";
				description = "1: indicates the profiling cycle has completed";
				type = BIT;
				access_bus = READ_ONLY;
				access_dev = WRITE_ONLY;
		 };

		 field {
				name = "Probe Count";
				prefix = "PROBE_COUNT";
				description = "Number of probes supported by this TPU instance (1-31)";
				size = 5;
				type = SLV;
				access_bus = READ_ONLY;
				access_dev = WRITE_ONLY;
		 };
		 field {
				name = "Probe Select";
				prefix = "PROBE_SEL";
				description = "Selects the active TPU probe accessed by the PROBE_CSR register (0..PROBE_COUNT-1)";
				size = 5;
				type = SLV;
				access_bus = READ_WRITE;
				access_dev = READ_ONLY;
		 };
	};

	reg {
		 name = "TPU Probe Control/Status Register";
		 description = "Configures the selected TPU probe";
		 prefix = "PROBE_CSR";

		 field {
				name = "Program Counter match value";
				description = "If the PC value in the core selected by CORE_ID bits matches the value of this field, the corresponding ACTION is triggered";
				prefix = "PC";
				size = 24;
				type = SLV;
				access_bus = READ_WRITE;
				access_dev = READ_WRITE;
				load = LOAD_EXT;
		 };

		 field {
				name = "Core select for PC match";
				description = "Selects the core that the probe applies to";
				prefix = "CORE_ID";
				size = 4;
				type = SLV;
				access_bus = READ_WRITE;
				access_dev = READ_WRITE;
				load = LOAD_EXT;
		 };

		 field {
				name = "Action";
				prefix = "ACTION";
				description = "Action to take when the PC match occurs:\
0: start recording\
1: stop recording\
2: save timestamp (period start)\
3: save timestamp (period end)";
				size = 4;
				type = SLV;
				access_bus = READ_WRITE;
				access_dev = READ_WRITE;
				load = LOAD_EXT;
		 };
	};

	reg {
		 name = "TPU Sample Buffer Current Sample Count";
		 prefix = "BUF_COUNT";
		 description = "Current number of samples in the TPU buffer";
		 field {
				name = "Count";
				 size = 16;
				 type = SLV;
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
	};

	reg {
		 name = "TPU Sample Buffer Size";
		 prefix = "BUF_SIZE";
		 description = "Max samples the TPU buffer can hold";
				 
		 field {
				name = "Size";
				 size = 16;
				 type = SLV;
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
	};
 
	reg {
		 name = "TPU Sample Buffer Address";
		 prefix = "BUF_ADDR";
		 name = "Address to read from the TPU sample buffer (in 32-bit words)";

		 field {
				name = "Address";
				 size = 16;
				 type = SLV;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
	};

	reg {
		 name = "TPU Sample Buffer Data";
		 prefix = "BUF_DATA";

		 description = "Data in the TPU sample buffer read from BUF_ADDR (indirect access)";

		 field {
				name = "Probe ID the timestamp corresponds to";
				prefix = "ID";
				size = 5;
				type = SLV;
				access_bus = READ_ONLY;
				access_dev = WRITE_ONLY;
		 };

		 field {
				name = "Timestamp (in system clock ticks)";
				prefix = "TSTAMP";
				size = 27;
				type = SLV;
				access_bus = READ_ONLY;
				access_dev = WRITE_ONLY;
		 };
	};

};

