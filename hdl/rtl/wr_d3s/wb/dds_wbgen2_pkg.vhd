---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for DDS RF distribution WB Slave
---------------------------------------------------------------------------------------
-- File           : dds_wbgen2_pkg.vhd
-- Author         : auto-generated by wbgen2 from dds_wb_slave.wb
-- Created        : Tue Nov 15 14:13:48 2016
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE dds_wb_slave.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package dds_wbgen2_pkg is
  
  
  -- Input registers (user design -> WB slave)
  
  type t_dds_in_registers is record
    tcr_wr_locked_i                          : std_logic;
    tcr_wr_link_i                            : std_logic;
    tcr_wr_time_valid_i                      : std_logic;
    gpior_pll_sdio_i                         : std_logic;
    gpior_pll_vcxo_sdo_i                     : std_logic;
    gpior_serdes_pll_locked_i                : std_logic;
    pd_data_data_i                           : std_logic_vector(15 downto 0);
    pd_data_valid_i                          : std_logic;
    tune_val_load_acc_i                      : std_logic;
    acc_snap_hi_i                            : std_logic_vector(31 downto 0);
    acc_snap_lo_i                            : std_logic_vector(31 downto 0);
    i2cr_scl_in_i                            : std_logic;
    i2cr_sda_in_i                            : std_logic;
    freq_meas_rf_in_i                        : std_logic_vector(31 downto 0);
    freq_meas_dds_i                          : std_logic_vector(31 downto 0);
    sample_idx_i                             : std_logic_vector(23 downto 0);
    rf_cnt_trigger_cycles_i                  : std_logic_vector(27 downto 0);
    rf_cnt_trigger_done_i                    : std_logic;
    rf_cnt_rf_snapshot_i                     : std_logic_vector(31 downto 0);
    rf_cnt_raw_i                             : std_logic_vector(31 downto 0);
    rf_cnt_cycles_snapshot_i                 : std_logic_vector(27 downto 0);
    trig_in_snapshot_i                       : std_logic_vector(31 downto 0);
    trig_in_csr_done_i                       : std_logic;
    pulse_out_csr_done_i                     : std_logic;
    end record;
  
  constant c_dds_in_registers_init_value: t_dds_in_registers := (
    tcr_wr_locked_i => '0',
    tcr_wr_link_i => '0',
    tcr_wr_time_valid_i => '0',
    gpior_pll_sdio_i => '0',
    gpior_pll_vcxo_sdo_i => '0',
    gpior_serdes_pll_locked_i => '0',
    pd_data_data_i => (others => '0'),
    pd_data_valid_i => '0',
    tune_val_load_acc_i => '0',
    acc_snap_hi_i => (others => '0'),
    acc_snap_lo_i => (others => '0'),
    i2cr_scl_in_i => '0',
    i2cr_sda_in_i => '0',
    freq_meas_rf_in_i => (others => '0'),
    freq_meas_dds_i => (others => '0'),
    sample_idx_i => (others => '0'),
    rf_cnt_trigger_cycles_i => (others => '0'),
    rf_cnt_trigger_done_i => '0',
    rf_cnt_rf_snapshot_i => (others => '0'),
    rf_cnt_raw_i => (others => '0'),
    rf_cnt_cycles_snapshot_i => (others => '0'),
    trig_in_snapshot_i => (others => '0'),
    trig_in_csr_done_i => '0',
    pulse_out_csr_done_i => '0'
    );
    
    -- Output registers (WB slave -> user design)
    
    type t_dds_out_registers is record
      cr_samp_en_o                             : std_logic;
      cr_samp_div_o                            : std_logic_vector(15 downto 0);
      cr_rf_cnt_enable_o                       : std_logic;
      tcr_wr_lock_en_o                         : std_logic;
      gpior_pll_sys_cs_n_o                     : std_logic;
      gpior_pll_sys_reset_n_o                  : std_logic;
      gpior_pll_sclk_o                         : std_logic;
      gpior_pll_sdio_o                         : std_logic;
      gpior_pll_sdio_load_o                    : std_logic;
      gpior_pll_sdio_dir_o                     : std_logic;
      gpior_pll_vcxo_reset_n_o                 : std_logic;
      gpior_pll_vcxo_cs_n_o                    : std_logic;
      gpior_adf_ce_o                           : std_logic;
      gpior_adf_clk_o                          : std_logic;
      gpior_adf_le_o                           : std_logic;
      gpior_adf_data_o                         : std_logic;
      pd_data_valid_o                          : std_logic;
      pd_data_valid_load_o                     : std_logic;
      tune_val_tune_o                          : std_logic_vector(27 downto 0);
      tune_val_load_acc_o                      : std_logic;
      tune_val_load_acc_load_o                 : std_logic;
      freq_hi_o                                : std_logic_vector(31 downto 0);
      freq_lo_o                                : std_logic_vector(31 downto 0);
      acc_load_hi_o                            : std_logic_vector(31 downto 0);
      acc_load_lo_o                            : std_logic_vector(31 downto 0);
      gain_o                                   : std_logic_vector(15 downto 0);
      rstr_pll_rst_o                           : std_logic;
      rstr_sw_rst_o                            : std_logic;
      i2cr_scl_out_o                           : std_logic;
      i2cr_sda_out_o                           : std_logic;
      freq_meas_gate_o                         : std_logic_vector(31 downto 0);
      rf_rst_phase_lo_o                        : std_logic_vector(7 downto 0);
      rf_rst_phase_hi_o                        : std_logic_vector(7 downto 0);
      rf_cnt_trigger_cycles_o                  : std_logic_vector(27 downto 0);
      rf_cnt_trigger_cycles_load_o             : std_logic;
      rf_cnt_trigger_arm_load_o                : std_logic;
      rf_cnt_sync_value_o                      : std_logic_vector(31 downto 0);
      rf_cnt_period_o                          : std_logic_vector(31 downto 0);
      trig_in_csr_arm_o                        : std_logic;
      pulse_out_cycles_o                       : std_logic_vector(31 downto 0);
      pulse_out_csr_arm_o                      : std_logic;
      pulse_out_csr_adj_coarse_o               : std_logic_vector(2 downto 0);
      pulse_out_csr_adj_fine_o                 : std_logic_vector(9 downto 0);
      phase_hi_phase_hi_o                      : std_logic_vector(10 downto 0);
      phase_hi_update_o                        : std_logic;
      phase_lo_o                               : std_logic_vector(31 downto 0);
      sr_rt_d3s_running_o                      : std_logic;
      end record;
    
    constant c_dds_out_registers_init_value: t_dds_out_registers := (
      cr_samp_en_o => '0',
      cr_samp_div_o => (others => '0'),
      cr_rf_cnt_enable_o => '0',
      tcr_wr_lock_en_o => '0',
      gpior_pll_sys_cs_n_o => '0',
      gpior_pll_sys_reset_n_o => '0',
      gpior_pll_sclk_o => '0',
      gpior_pll_sdio_o => '0',
      gpior_pll_sdio_load_o => '0',
      gpior_pll_sdio_dir_o => '0',
      gpior_pll_vcxo_reset_n_o => '0',
      gpior_pll_vcxo_cs_n_o => '0',
      gpior_adf_ce_o => '0',
      gpior_adf_clk_o => '0',
      gpior_adf_le_o => '0',
      gpior_adf_data_o => '0',
      pd_data_valid_o => '0',
      pd_data_valid_load_o => '0',
      tune_val_tune_o => (others => '0'),
      tune_val_load_acc_o => '0',
      tune_val_load_acc_load_o => '0',
      freq_hi_o => (others => '0'),
      freq_lo_o => (others => '0'),
      acc_load_hi_o => (others => '0'),
      acc_load_lo_o => (others => '0'),
      gain_o => (others => '0'),
      rstr_pll_rst_o => '0',
      rstr_sw_rst_o => '0',
      i2cr_scl_out_o => '0',
      i2cr_sda_out_o => '0',
      freq_meas_gate_o => (others => '0'),
      rf_rst_phase_lo_o => (others => '0'),
      rf_rst_phase_hi_o => (others => '0'),
      rf_cnt_trigger_cycles_o => (others => '0'),
      rf_cnt_trigger_cycles_load_o => '0',
      rf_cnt_trigger_arm_load_o => '0',
      rf_cnt_sync_value_o => (others => '0'),
      rf_cnt_period_o => (others => '0'),
      trig_in_csr_arm_o => '0',
      pulse_out_cycles_o => (others => '0'),
      pulse_out_csr_arm_o => '0',
      pulse_out_csr_adj_coarse_o => (others => '0'),
      pulse_out_csr_adj_fine_o => (others => '0'),
      phase_hi_phase_hi_o => (others => '0'),
      phase_hi_update_o => '0',
      phase_lo_o => (others => '0'),
      sr_rt_d3s_running_o => '0'
      );
    function "or" (left, right: t_dds_in_registers) return t_dds_in_registers;
    function f_x_to_zero (x:std_logic) return std_logic;
    function f_x_to_zero (x:std_logic_vector) return std_logic_vector;
end package;

package body dds_wbgen2_pkg is
function f_x_to_zero (x:std_logic) return std_logic is
begin
if x = '1' then
return '1';
else
return '0';
end if;
end function;
function f_x_to_zero (x:std_logic_vector) return std_logic_vector is
variable tmp: std_logic_vector(x'length-1 downto 0);
begin
for i in 0 to x'length-1 loop
if(x(i) = 'X' or x(i) = 'U') then
tmp(i):= '0';
else
tmp(i):=x(i);
end if; 
end loop; 
return tmp;
end function;
function "or" (left, right: t_dds_in_registers) return t_dds_in_registers is
variable tmp: t_dds_in_registers;
begin
tmp.tcr_wr_locked_i := f_x_to_zero(left.tcr_wr_locked_i) or f_x_to_zero(right.tcr_wr_locked_i);
tmp.tcr_wr_link_i := f_x_to_zero(left.tcr_wr_link_i) or f_x_to_zero(right.tcr_wr_link_i);
tmp.tcr_wr_time_valid_i := f_x_to_zero(left.tcr_wr_time_valid_i) or f_x_to_zero(right.tcr_wr_time_valid_i);
tmp.gpior_pll_sdio_i := f_x_to_zero(left.gpior_pll_sdio_i) or f_x_to_zero(right.gpior_pll_sdio_i);
tmp.gpior_pll_vcxo_sdo_i := f_x_to_zero(left.gpior_pll_vcxo_sdo_i) or f_x_to_zero(right.gpior_pll_vcxo_sdo_i);
tmp.gpior_serdes_pll_locked_i := f_x_to_zero(left.gpior_serdes_pll_locked_i) or f_x_to_zero(right.gpior_serdes_pll_locked_i);
tmp.pd_data_data_i := f_x_to_zero(left.pd_data_data_i) or f_x_to_zero(right.pd_data_data_i);
tmp.pd_data_valid_i := f_x_to_zero(left.pd_data_valid_i) or f_x_to_zero(right.pd_data_valid_i);
tmp.tune_val_load_acc_i := f_x_to_zero(left.tune_val_load_acc_i) or f_x_to_zero(right.tune_val_load_acc_i);
tmp.acc_snap_hi_i := f_x_to_zero(left.acc_snap_hi_i) or f_x_to_zero(right.acc_snap_hi_i);
tmp.acc_snap_lo_i := f_x_to_zero(left.acc_snap_lo_i) or f_x_to_zero(right.acc_snap_lo_i);
tmp.i2cr_scl_in_i := f_x_to_zero(left.i2cr_scl_in_i) or f_x_to_zero(right.i2cr_scl_in_i);
tmp.i2cr_sda_in_i := f_x_to_zero(left.i2cr_sda_in_i) or f_x_to_zero(right.i2cr_sda_in_i);
tmp.freq_meas_rf_in_i := f_x_to_zero(left.freq_meas_rf_in_i) or f_x_to_zero(right.freq_meas_rf_in_i);
tmp.freq_meas_dds_i := f_x_to_zero(left.freq_meas_dds_i) or f_x_to_zero(right.freq_meas_dds_i);
tmp.sample_idx_i := f_x_to_zero(left.sample_idx_i) or f_x_to_zero(right.sample_idx_i);
tmp.rf_cnt_trigger_cycles_i := f_x_to_zero(left.rf_cnt_trigger_cycles_i) or f_x_to_zero(right.rf_cnt_trigger_cycles_i);
tmp.rf_cnt_trigger_done_i := f_x_to_zero(left.rf_cnt_trigger_done_i) or f_x_to_zero(right.rf_cnt_trigger_done_i);
tmp.rf_cnt_rf_snapshot_i := f_x_to_zero(left.rf_cnt_rf_snapshot_i) or f_x_to_zero(right.rf_cnt_rf_snapshot_i);
tmp.rf_cnt_raw_i := f_x_to_zero(left.rf_cnt_raw_i) or f_x_to_zero(right.rf_cnt_raw_i);
tmp.rf_cnt_cycles_snapshot_i := f_x_to_zero(left.rf_cnt_cycles_snapshot_i) or f_x_to_zero(right.rf_cnt_cycles_snapshot_i);
tmp.trig_in_snapshot_i := f_x_to_zero(left.trig_in_snapshot_i) or f_x_to_zero(right.trig_in_snapshot_i);
tmp.trig_in_csr_done_i := f_x_to_zero(left.trig_in_csr_done_i) or f_x_to_zero(right.trig_in_csr_done_i);
tmp.pulse_out_csr_done_i := f_x_to_zero(left.pulse_out_csr_done_i) or f_x_to_zero(right.pulse_out_csr_done_i);
return tmp;
end function;
end package body;
