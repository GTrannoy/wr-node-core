-- -*- Mode: LUA; tab-width: 2 -*-

peripheral {
   name = "DDS RF distribution WB Slave";
   hdl_entity = "dds_wb_slave";
   prefix = "dds";

	 reg {
			prefix = "CR";
			name = "Control Register";
			
			field {
				 name = "Sampling Enable";
				 prefix = "SAMP_EN";
				 description = "write 1: enable sampling of the DDS control loop (PD_DATA will be periodically updated withthe ADC value, DDS frequency tune will be loaded from the TUNE_VAL register)\
write 0: disable sampling";

				 type = BIT;
				 clock = "clk_ref_i";
				 access_bus = READ_WRITE;
         access_dev = READ_ONLY;
			};

			field {
				 name = "Sample rate divider";
				 prefix = "SAMP_DIV";
				 description = "Defines the sample rate of the control loop: Fs = 1 MHz / (SAMP_DIV + 1)";
				 type = SLV;
				 size = 16;
				 clock = "clk_ref_i";
				 access_bus = READ_WRITE;
         access_dev = READ_ONLY;
			};

			field {
				 name = "Enable RF Counter";
				 prefix = "RF_CNT_ENABLE";
				 type = BIT;
				 clock = "clk_dds_i";
				 access_bus = READ_WRITE;
         access_dev = READ_ONLY;
			};
	 };

	 reg {
			prefix = "TCR";
			name = "Time Control Register";
			
			field {
				 name = "WR Lock Enable";
				 prefix = "WR_LOCK_EN";
				 description = "write 1: enables locking core's time to WR";
				 type = BIT;
				 access_bus = READ_WRITE;
         access_dev = READ_ONLY;
			};

			field {
				 name = "WR Locked";
				 prefix = "WR_LOCKED";
				 description = "read 1: DDS time base locked to WR";
				 type = BIT;
				 access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
			};

			field {
				 name = "WR Link";
				 prefix = "WR_LINK";
				 description = "read 1: WR link is up";
				 type = BIT;
				 access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
			};

			field {
				 name = "WR Time Valid";
				 prefix = "WR_TIME_VALID";
				 description = "read 1: WR link is synchronized";
				 type = BIT;
				 access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
			};
		
	 };

   reg {
      prefix = "GPIOR";
      name = "GPIO register";

      field {
         name = "System PLL CS";
         prefix = "PLL_SYS_CS_N";
				 description = "System PLL CS_N line output";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };

      field {
         name = "System Reset";
         prefix = "PLL_SYS_RESET_N";
				 description = "System PLL RESET_N line output";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };

      field {
         name = "PLL SCLK (shared)";
         prefix = "PLL_SCLK";
				 description = "System/VCXO PLL SPI clock output";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };

      field {
         name = "PLL SDIO (shared)";
         prefix = "PLL_SDIO";
				 description = "System/VCXO PLL SPI data input/output";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_WRITE;
         load = LOAD_EXT;
      };

      field {
         name = "PLL SDIO direction (shared)";
         prefix = "PLL_SDIO_DIR";
				 description = "System/VCXO PLL SPI data line direction (1 = FPGA output)";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };

      field {
         name = "VCXO PLL Reset";
         prefix = "PLL_VCXO_RESET_N";
				 description = "VCXO PLL SPI RESET_N line";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };

			field {
         name = "VCXO PLL Chip Select";
         prefix = "PLL_VCXO_CS_N";
				 description = "VCXO PLL SPI CS_N line";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };

      field {
         name = "VCXO PLL SDO";
         prefix = "PLL_VCXO_SDO";
				 description = "unused";

         type = BIT;
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
      };

      field {
         name = "ADF4002 Chip Enable";
         prefix = "ADF_CE";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;

      };

      field {
         name = "ADF4002 Clock";
         prefix = "ADF_CLK";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;

      };

      field {
         name = "ADF4002 Latch Enable";
         prefix = "ADF_LE";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;

      };

      field {
         name = "ADF4002 Data";
         prefix = "ADF_DATA";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };

			field {
         name = "Serdes PLL locked";
         prefix = "SERDES_PLL_LOCKED";
				 description = "read 1: FPGA internal PLL for deriving 500 MHz DAC serdes clock is locked.";

         type = BIT;
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
      };
   };

   reg {
      name = "PD ADC Data register";
      prefix = "PD_DATA";

      field {
         name = "ADC data";
         prefix = "DATA";
				 description = "Output of the ADF4002 phase detector sampled by the ADC at the last sample";
         size = 16;
         type = SLV;
				 clock = "clk_ref_i";
				 access_dev = WRITE_ONLY;
				 access_bus = READ_ONLY;
      };
			
			field {
				 name = "ADC data valid";
				 prefix = "VALID";
				 description = "read 1: next phase sample is waiting in the DATA field\
                        write 0: clears the VALID flag";
				 type = BIT;
				 clock = "clk_ref_i";
				 access_dev = READ_WRITE;
				 access_bus = READ_WRITE;
				 load = LOAD_EXT;
			};
	 };

   reg {
      name = "DDS Tune Value";
      prefix = "TUNE_VAL";
      field {
				 clock = "clk_ref_i";
         name = "DDS tune word";
         prefix = "TUNE";
				 description = "Current frequency tune value, loaded to the DDS at the beginning of each sampling interval. The actual DDS step is (TUNE * DDS_GAIN) / 4096 + FREQ";
         size = 28;
         type = SLV;
				 access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };

			field {
				 clock = "clk_ref_i";
         name = "Load DDS Accumulator along with next tune sample.";
 			 description = "write 1: forces re-load of the DDS accumulator (from ACC_LOAD registers) along with the next frequency tune value";
         prefix = "LOAD_ACC";
				 type = BIT;
				 access_bus = READ_WRITE;
         access_dev = READ_WRITE;
				 load = LOAD_EXT;
			};
   };
	

   reg {
      name = "DDS Center frequency hi";
      prefix = "FREQ_HI";
      field {
         name = "Center freq HI";
				 description = "Center frequnency of the DDS, high part - 11 bits. Check scripts/calc_tune.py for the equation.";
         size = 32;
         type = SLV;
         clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };    
   };

   reg {
      name = "DDS Center frequency lo";
      prefix = "FREQ_LO";
      field {
         name = "Center freq LO";
				 description = "Center frequnency of the DDS, low part - 32 bits. Check scripts/calc_tune.py for the equation.";
         size = 32;
         type = SLV;
         clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
         
      };
   };

   reg {
      name = "DDS Accumulator Snapshot HI";
      prefix = "ACC_SNAP_HI";
      field {
         name = "HI";
				 description = "Value of the DDS accumulator taken at the beginning of the previous sampling period (high 11 bits)";
         size = 32;
         type = SLV;
         clock = "clk_ref_i";
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
      };    
   };

   reg {
      name = "DDS Accumulator Snapshot LO";
      prefix = "ACC_SNAP_LO";
      field {
         name = "LO";
				 description = "Value of the DDS accumulator taken at the beginning of the previous sampling period (lower 32 bits)";
         size = 32;
         type = SLV;
         clock = "clk_ref_i";
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
         
      };
   };

 reg {
      name = "DDS Accumulator Load Value HI";
      prefix = "ACC_LOAD_HI";
      field {
         name = "HI";
				 description = "Value of the DDS accumulator to load at the beginning of the next sampling period (if TUNE_VAL.LOAD_ACC = 1). High 11 bits.";
         size = 32;
         type = SLV;
         clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };    
   };

   reg {
      name = "DDS Accumulator Load Value LO";
      prefix = "ACC_LOAD_LO";
      field {
         name = "LO";
				 description = "Value of the DDS accumulator to load at the beginning of the next sampling period (if TUNE_VAL.LOAD_ACC = 1). Lower 32 bits.";
         size = 32;
         type = SLV;
         clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
         
      };
   };


   reg {
      name = "DDS Gain";
      prefix = "GAIN";
      field {
         name = "DDS gain (4.12 unsigned)";
				 description = "Gain of the DDS tuning. The DDS frequency control word is equal to: \
                        CTRL = (DDS_GAIN * TUNE_VAL) / 4096 + FREQ(HI,LO)";
         size = 16;
         type = SLV;
         clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
         
      };
   };

   reg {
      name = "Reset Register";
      prefix = "RSTR";
      field {
         name = "FPGA REF/Serdes PLL Reset";
         prefix = "PLL_RST";
				 description = "write 1: resets the internal PLL producing the DDS DAC serdes clock\
                        write 0: un-reset";
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
         
      };
      field {
         name = "FPGA DDS Logic software reset";
         prefix = "SW_RST";
				 description = "write 1: software reset of the DDS core\
                        write 0: un-reset";
				 reset_value = 1;
         type = BIT;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
         
      };
   };

   reg {
      name = "I2C bitbanged IO register";
      prefix = "I2CR";
      field {
         name = "SCL Line out";
         prefix = "SCL_OUT";
         type = BIT;
         reset_value = 1;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };
      field {
         name = "SDA Line out";
         prefix = "SDA_OUT";
         type = BIT;
         reset_value = 1;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };
      field {
         name = "SCL Line in";
         prefix = "SCL_IN";
         type = BIT;
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
      };
      field {
         name = "SDA Line in";
         prefix = "SDA_IN";
         type = BIT;
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
      };
   };

	 reg {
      name = "VCXO/Reference Clock Frequency";
      prefix = "FREQ_MEAS_RF_IN";
      field {
         name = "Freq";
				 description = "Frequency of the REF CLK front panel input (divided by AD9510)";
         size = 32;
         type = SLV;
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
      };    
   };

	 reg {
      name = "DDS Output Frequency";
      prefix = "FREQ_MEAS_DDS";
      field {
         name = "Freq";
				 description = "Frequency of the DDS output signal";
         size = 32;
         type = SLV;
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
      };    
   };

	 reg {
      name = "Frequency Measurement Gating";
      prefix = "FREQ_MEAS_GATE";
      field {
				 reset_value = 62500000;
				 description = "Frequency measurement gating period, in 16ns ticks";
         name = "Freq";
         size = 32;
         type = SLV;
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };    
   };

	 reg {
      name = "Current Sample Index";
      prefix = "SAMPLE_IDX";
      field {
         name = "IDX";
				 description = "Index of the current sampling period. The one that starts exactly at the PPS has index 0.";
         size = 24;
         type = SLV;
				 clock = "clk_ref_i";
         access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
      };    
   };

	 reg {
			name = "RF Counter reset safe phase value";
			prefix = "RF_RST_PHASE";
			field {
         prefix = "LO";
				 name = "Lower bound";
         size = 8;
         type = SLV;
				 clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };    

			field {
         prefix = "HI";
				 name = "Upper bound";
         size = 8;
         type = SLV;
				 clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };    
	 };

	 reg {
			name = "RF Load TAI Trigger cycles";
			prefix = "RF_CNT_TRIGGER";
			field {
				 prefix = "CYCLES";
				 name = "TAI cycles";
				 type = SLV;
				 size = 28;
				 clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_WRITE;
				 load = LOAD_EXT;
			};

			field {
				 name = "ARM RF Counter Load";
				 prefix = "ARM_LOAD";
				 type = MONOSTABLE;
				 clock = "clk_ref_i";
			};

			field {
				 name = "DONE";
				 prefix = "DONE";
				 type = BIT;
				 clock = "clk_ref_i";
				 access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
			};			

	 };

	 reg {
			name = "RF Counter Sync Value";
			prefix = "RF_CNT_SYNC_VALUE";
			field {
				 name = "RF ticks";
				 type = SLV;
				 size = 32;
				 clock = "clk_ref_i";
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
	 };

	 reg {
			name = "RF Counter Period";
			prefix = "RF_CNT_PERIOD";
			field {
				 name = "RF Counter Period";
				 type = SLV;
				 size = 32;
				 clock = "clk_dds_i";
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
	 };

	 reg {
			name = "RF Counter Snapshot (RF ticks)";
			prefix = "RF_CNT_RF_SNAPSHOT";
			field {
				 name = "RF Counter Snapshot";
				 type = SLV;
				 size = 32;
				 clock = "clk_ref_i";
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
	 };

	 reg {
			name = "RF Counter Raw Value (RF ticks)";
			prefix = "RF_CNT_RAW";
			field {
				 name = "RF Counter Raw value";
				 type = SLV;
				 size = 32;
				 clock = "clk_dds_i";
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
	 };

	 reg {
			name = "RF Counter TAI Resync Snapshot";
			prefix = "RF_CNT_CYCLES_SNAPSHOT";
			field {
				 name = "TAI Cycles Snapshot";
				 type = SLV;
				 size = 28;
				 clock = "clk_ref_i";
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
	 };

	 reg {
			name = "Trigger In Snapshot";
			prefix = "TRIG_IN_SNAPSHOT";
			field {
				 name = "Trigger In Snapshot (RF cycles)";
				 type = SLV;
				 size = 32;
				 clock = "clk_dds_i";
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
	 };

	 reg {
			name = "Trigger In Control";
			prefix = "TRIG_IN_CSR";

			field {
				 name = "Trigger In Arm (Snapshot)";
				 type = MONOSTABLE;
				 prefix = "ARM";
				 clock = "clk_dds_i";
			};

			field {
				 name = "DONE";
				 prefix = "DONE";
				 type = BIT;
				 clock = "clk_dds_i";
				 access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
			};			
	 };

	 reg {
			name = "Pulse Out Cycles";
			prefix = "PULSE_OUT_CYCLES";
			field {
				 name = "Pulse at (RF cycles)";
				 type = SLV;
				 size = 32;
				 clock = "clk_dds_i";
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
	 };

	 reg {
			name = "Pulse Out Control";
			prefix = "PULSE_OUT_CSR";

			field {
				 name = "Arm (Snapshot)";
				 type = MONOSTABLE;
				 prefix = "ARM";
				 clock = "clk_dds_i";
			};

			field {
				 name = "DONE";
				 prefix = "DONE";
				 type = BIT;
				 clock = "clk_dds_i";
				 access_bus = READ_ONLY;
         access_dev = WRITE_ONLY;
			};			

			field {
				 name = "Coarse Adjust";
				 prefix = "ADJ_COARSE";
				 type = SLV;
				 clock = "clk_dds_i";
				 size = 3;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};

			field {
				 name = "Fine Adjust";
				 prefix = "ADJ_FINE";
				 type = SLV;
				 clock = "clk_dds_i";
				 size = 10;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
	 };

reg {
      name = "DDS Phase Adjust HI";
      prefix = "PHASE_HI";
      field {
         name = "Phase MSB";
				 prefix = "PHASE_HI";
				 description = "Value added to the DDS accumulator containing the phase adjustment. High 11 bits.";
         size = 11;
         type = SLV;
         clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
      };

			field {
				 name = "Update phase";
				 prefix = "UPDATE";
				 description = "write 1: updates the DDS phase with the values of PHASE_LO/PHASE_HI";
				 type = MONOSTABLE;
         clock = "clk_ref_i";
			};
   };

   reg {
      name = "DDS Phase Adjust LO";
      prefix = "PHASE_LO";
      field {
         name = "LO";
				 description = "Value added to the DDS accumulator containing the phase adjustment. Lower 32 bits.";
         size = 32;
         type = SLV;
         clock = "clk_ref_i";
         access_bus = READ_WRITE;
         access_dev = READ_ONLY;
         
      };
   };
};
