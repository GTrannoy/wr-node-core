---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for GMT Converter WB Slave
---------------------------------------------------------------------------------------
-- File           : gmt_converter_wbgen2_pkg.vhd
-- Author         : auto-generated by wbgen2 from gmt_converter_wb.wb
-- Created        : Tue Nov 15 21:58:14 2016
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE gmt_converter_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package gmtc_wbgen2_pkg is
  
  
  -- Input registers (user design -> WB slave)
  
  type t_gmtc_in_registers is record
    rx_status_i                              : std_logic_vector(7 downto 0);
    rx_data0_i                               : std_logic_vector(31 downto 0);
    rx_data1_i                               : std_logic_vector(31 downto 0);
    rx_data2_i                               : std_logic_vector(31 downto 0);
    rx_data3_i                               : std_logic_vector(31 downto 0);
    rx_data4_i                               : std_logic_vector(31 downto 0);
    rx_tstamp0_i                             : std_logic_vector(31 downto 0);
    rx_tstamp1_i                             : std_logic_vector(31 downto 0);
    rx_tstamp2_i                             : std_logic_vector(31 downto 0);
    rx_tstamp3_i                             : std_logic_vector(31 downto 0);
    rx_tstamp4_i                             : std_logic_vector(31 downto 0);
    end record;
  
  constant c_gmtc_in_registers_init_value: t_gmtc_in_registers := (
    rx_status_i => (others => '0'),
    rx_data0_i => (others => '0'),
    rx_data1_i => (others => '0'),
    rx_data2_i => (others => '0'),
    rx_data3_i => (others => '0'),
    rx_data4_i => (others => '0'),
    rx_tstamp0_i => (others => '0'),
    rx_tstamp1_i => (others => '0'),
    rx_tstamp2_i => (others => '0'),
    rx_tstamp3_i => (others => '0'),
    rx_tstamp4_i => (others => '0')
    );
    
    -- Output registers (WB slave -> user design)
    
    type t_gmtc_out_registers is record
      cr_swrst_o                               : std_logic;
      delay_o                                  : std_logic_vector(15 downto 0);
      pps_offset_o                             : std_logic_vector(31 downto 0);
      rx_status_o                              : std_logic_vector(7 downto 0);
      rx_status_load_o                         : std_logic;
      end record;
    
    constant c_gmtc_out_registers_init_value: t_gmtc_out_registers := (
      cr_swrst_o => '0',
      delay_o => (others => '0'),
      pps_offset_o => (others => '0'),
      rx_status_o => (others => '0'),
      rx_status_load_o => '0'
      );
    function "or" (left, right: t_gmtc_in_registers) return t_gmtc_in_registers;
    function f_x_to_zero (x:std_logic) return std_logic;
    function f_x_to_zero (x:std_logic_vector) return std_logic_vector;
end package;

package body gmtc_wbgen2_pkg is
function f_x_to_zero (x:std_logic) return std_logic is
begin
if x = '1' then
return '1';
else
return '0';
end if;
end function;
function f_x_to_zero (x:std_logic_vector) return std_logic_vector is
variable tmp: std_logic_vector(x'length-1 downto 0);
begin
for i in 0 to x'length-1 loop
if(x(i) = 'X' or x(i) = 'U') then
tmp(i):= '0';
else
tmp(i):=x(i);
end if; 
end loop; 
return tmp;
end function;
function "or" (left, right: t_gmtc_in_registers) return t_gmtc_in_registers is
variable tmp: t_gmtc_in_registers;
begin
tmp.rx_status_i := f_x_to_zero(left.rx_status_i) or f_x_to_zero(right.rx_status_i);
tmp.rx_data0_i := f_x_to_zero(left.rx_data0_i) or f_x_to_zero(right.rx_data0_i);
tmp.rx_data1_i := f_x_to_zero(left.rx_data1_i) or f_x_to_zero(right.rx_data1_i);
tmp.rx_data2_i := f_x_to_zero(left.rx_data2_i) or f_x_to_zero(right.rx_data2_i);
tmp.rx_data3_i := f_x_to_zero(left.rx_data3_i) or f_x_to_zero(right.rx_data3_i);
tmp.rx_data4_i := f_x_to_zero(left.rx_data4_i) or f_x_to_zero(right.rx_data4_i);
tmp.rx_tstamp0_i := f_x_to_zero(left.rx_tstamp0_i) or f_x_to_zero(right.rx_tstamp0_i);
tmp.rx_tstamp1_i := f_x_to_zero(left.rx_tstamp1_i) or f_x_to_zero(right.rx_tstamp1_i);
tmp.rx_tstamp2_i := f_x_to_zero(left.rx_tstamp2_i) or f_x_to_zero(right.rx_tstamp2_i);
tmp.rx_tstamp3_i := f_x_to_zero(left.rx_tstamp3_i) or f_x_to_zero(right.rx_tstamp3_i);
tmp.rx_tstamp4_i := f_x_to_zero(left.rx_tstamp4_i) or f_x_to_zero(right.rx_tstamp4_i);
return tmp;
end function;
end package body;
